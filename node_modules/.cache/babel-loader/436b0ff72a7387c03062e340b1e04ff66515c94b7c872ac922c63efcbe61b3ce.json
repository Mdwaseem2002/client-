{"ast":null,"code":"export default {\n  data() {\n    return {\n      formData: {\n        name: '',\n        email: '',\n        password: ''\n      },\n      existingData: [],\n      currentTime: ''\n    };\n  },\n  methods: {\n    async submitForm() {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/save', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(this.formData)\n        });\n        const responseData = await response.json();\n        console.log(responseData.message); // Log server response\n        alert(responseData.message); // Show response message\n        // Clear form fields after submission\n        this.formData.name = '';\n        this.formData.email = '';\n        this.formData.password = '';\n        // Do not fetch existing data here\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    },\n    async fetchExistingData() {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/get_data');\n        if (response.ok) {\n          this.existingData = await response.json();\n        } else {\n          console.error('Failed to fetch existing data:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    },\n    updateTime() {\n      const now = new Date();\n      const hours = now.getHours().toString().padStart(2, '0');\n      const minutes = now.getMinutes().toString().padStart(2, '0');\n      const seconds = now.getSeconds().toString().padStart(2, '0');\n      this.currentTime = `${hours}:${minutes}:${seconds}`;\n    }\n  },\n  mounted() {\n    // Update time initially and every second\n    this.updateTime();\n    setInterval(() => {\n      this.updateTime();\n    }, 1000);\n  }\n};","map":{"version":3,"names":["data","formData","name","email","password","existingData","currentTime","methods","submitForm","response","fetch","method","headers","body","JSON","stringify","responseData","json","console","log","message","alert","error","fetchExistingData","ok","statusText","updateTime","now","Date","hours","getHours","toString","padStart","minutes","getMinutes","seconds","getSeconds","mounted","setInterval"],"sources":["/home/waseem/project/client-/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <h1>WELCOME TO OUR PAGE </h1>\n\n    <!-- Form to submit data -->\n    <form @submit.prevent=\"submitForm\">\n      <label for=\"name\">Name:</label>\n      <input type=\"text\" id=\"name\" v-model=\"formData.name\" required><br><br>\n      \n      <label for=\"email\">Email:</label>\n      <input type=\"email\" id=\"email\" v-model=\"formData.email\" required><br><br>\n      \n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" v-model=\"formData.password\" required><br><br>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n\n    <!-- Get button to fetch existing data -->\n    <button @click=\"fetchExistingData\">Get</button>\n\n    <h2>Existing Data</h2>\n    <div id=\"existingData\">\n      <ul v-if=\"existingData && existingData.length > 0\">\n        <li v-for=\"(data, index) in existingData\" :key=\"index\">\n          Name: {{ data.name }}, Email: {{ data.email }}, Password: {{ data.password }}\n        </li>\n      </ul>\n      <p v-else>No existing data found.</p>\n    </div>\n\n    <!-- Display current time -->\n    <div class=\"time\">{{ currentTime }}</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      formData: {\n        name: '',\n        email: '',\n        password: ''\n      },\n      existingData: [],\n      currentTime: ''\n    };\n  },\n  methods: {\n    async submitForm() {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/save', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(this.formData)\n        });\n        const responseData = await response.json();\n        console.log(responseData.message); // Log server response\n        alert(responseData.message); // Show response message\n        // Clear form fields after submission\n        this.formData.name = '';\n        this.formData.email = '';\n        this.formData.password = '';\n        // Do not fetch existing data here\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    },\n    async fetchExistingData() {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/get_data');\n        if (response.ok) {\n          this.existingData = await response.json();\n        } else {\n          console.error('Failed to fetch existing data:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    },\n    updateTime() {\n      const now = new Date();\n      const hours = now.getHours().toString().padStart(2, '0');\n      const minutes = now.getMinutes().toString().padStart(2, '0');\n      const seconds = now.getSeconds().toString().padStart(2, '0');\n      this.currentTime = `${hours}:${minutes}:${seconds}`;\n    }\n  },\n  mounted() {\n    // Update time initially and every second\n    this.updateTime();\n    setInterval(() => {\n      this.updateTime();\n    }, 1000);\n  }\n};\n</script>\n\n<style scoped>\n.container {\n  text-align: center;\n}\n\n.time {\n  margin-top: 20px;\n  font-size: 24px;\n}\n</style>\n"],"mappings":"AAqCA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE;QACRC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE;MACZ,CAAC;MACDC,YAAY,EAAE,EAAE;MAChBC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,4BAA4B,EAAE;UACzDC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACd,QAAQ;QACpC,CAAC,CAAC;QACF,MAAMe,YAAW,GAAI,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAC1CC,OAAO,CAACC,GAAG,CAACH,YAAY,CAACI,OAAO,CAAC,EAAE;QACnCC,KAAK,CAACL,YAAY,CAACI,OAAO,CAAC,EAAE;QAC7B;QACA,IAAI,CAACnB,QAAQ,CAACC,IAAG,GAAI,EAAE;QACvB,IAAI,CAACD,QAAQ,CAACE,KAAI,GAAI,EAAE;QACxB,IAAI,CAACF,QAAQ,CAACG,QAAO,GAAI,EAAE;QAC3B;MACF,EAAE,OAAOkB,KAAK,EAAE;QACdJ,OAAO,CAACI,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;IACF,CAAC;IACD,MAAMC,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF,MAAMd,QAAO,GAAI,MAAMC,KAAK,CAAC,gCAAgC,CAAC;QAC9D,IAAID,QAAQ,CAACe,EAAE,EAAE;UACf,IAAI,CAACnB,YAAW,GAAI,MAAMI,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAC3C,OAAO;UACLC,OAAO,CAACI,KAAK,CAAC,gCAAgC,EAAEb,QAAQ,CAACgB,UAAU,CAAC;QACtE;MACF,EAAE,OAAOH,KAAK,EAAE;QACdJ,OAAO,CAACI,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;IACF,CAAC;IACDI,UAAUA,CAAA,EAAG;MACX,MAAMC,GAAE,GAAI,IAAIC,IAAI,CAAC,CAAC;MACtB,MAAMC,KAAI,GAAIF,GAAG,CAACG,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MACxD,MAAMC,OAAM,GAAIN,GAAG,CAACO,UAAU,CAAC,CAAC,CAACH,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAC5D,MAAMG,OAAM,GAAIR,GAAG,CAACS,UAAU,CAAC,CAAC,CAACL,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAC5D,IAAI,CAAC1B,WAAU,GAAK,GAAEuB,KAAM,IAAGI,OAAQ,IAAGE,OAAQ,EAAC;IACrD;EACF,CAAC;EACDE,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACX,UAAU,CAAC,CAAC;IACjBY,WAAW,CAAC,MAAM;MAChB,IAAI,CAACZ,UAAU,CAAC,CAAC;IACnB,CAAC,EAAE,IAAI,CAAC;EACV;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}