{"ast":null,"code":"export default {\n  data() {\n    return {\n      formData: {\n        name: '',\n        email: '',\n        password: ''\n      },\n      existingData: []\n    };\n  },\n  methods: {\n    async submitForm() {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/save', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(this.formData)\n        });\n        const responseData = await response.json();\n        console.log(responseData.message); // Log server response\n        alert(responseData.message); // Show response message\n        // Clear form fields after submission\n        this.formData.name = '';\n        this.formData.email = '';\n        this.formData.password = '';\n        // Fetch existing data again\n        this.fetchExistingData();\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    },\n    async fetchRecivingData() {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/get_data');\n        if (response.ok) {\n          this.existingData = await response.json();\n        } else {\n          console.error('Failed to fetch existing data:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  },\n  mounted() {\n    // Fetch existing data when the component is mounted\n    this.fetchExistingData();\n  }\n};","map":{"version":3,"names":["data","formData","name","email","password","existingData","methods","submitForm","response","fetch","method","headers","body","JSON","stringify","responseData","json","console","log","message","alert","fetchExistingData","error","fetchRecivingData","ok","statusText","mounted"],"sources":["/home/waseem/project/client-/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Form Submission</h1>\n\n    <!-- Form to submit data -->\n    <form @submit.prevent=\"submitForm\">\n      <label for=\"name\">Name:</label>\n      <input type=\"text\" id=\"name\" v-model=\"formData.name\" required><br><br>\n      \n      <label for=\"email\">Email:</label>\n      <input type=\"email\" id=\"email\" v-model=\"formData.email\" required><br><br>\n      \n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" v-model=\"formData.password\" required><br><br>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n\n    <!-- Get button to fetch existing data -->\n    <button @click=\"fetchExistingData\">Get</button>\n\n    <h2>Existing Data</h2>\n    <div id=\"existingData\">\n      <ul v-if=\"existingData && existingData.length > 0\">\n        <li v-for=\"(data, index) in existingData\" :key=\"index\">\n          Name: {{ data.name }}, Email: {{ data.email }}, Password: {{ data.password }}\n        </li>\n      </ul>\n      <p v-else>No existing data found.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      formData: {\n        name: '',\n        email: '',\n        password: ''\n      },\n      existingData: []\n    };\n  },\n  methods: {\n    async submitForm() {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/save', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(this.formData)\n        });\n        const responseData = await response.json();\n        console.log(responseData.message); // Log server response\n        alert(responseData.message); // Show response message\n        // Clear form fields after submission\n        this.formData.name = '';\n        this.formData.email = '';\n        this.formData.password = '';\n        // Fetch existing data again\n        this.fetchExistingData();\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    },\n    async fetchRecivingData() {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/get_data');\n        if (response.ok) {\n          this.existingData = await response.json();\n        } else {\n          console.error('Failed to fetch existing data:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  },\n  mounted() {\n    // Fetch existing data when the component is mounted\n    this.fetchExistingData();\n  }\n};\n</script>\n\n<style scoped>\n/* Your component-specific styles */\n</style>\n"],"mappings":"AAkCA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE;QACRC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE;MACZ,CAAC;MACDC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,4BAA4B,EAAE;UACzDC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACb,QAAQ;QACpC,CAAC,CAAC;QACF,MAAMc,YAAW,GAAI,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAC1CC,OAAO,CAACC,GAAG,CAACH,YAAY,CAACI,OAAO,CAAC,EAAE;QACnCC,KAAK,CAACL,YAAY,CAACI,OAAO,CAAC,EAAE;QAC7B;QACA,IAAI,CAAClB,QAAQ,CAACC,IAAG,GAAI,EAAE;QACvB,IAAI,CAACD,QAAQ,CAACE,KAAI,GAAI,EAAE;QACxB,IAAI,CAACF,QAAQ,CAACG,QAAO,GAAI,EAAE;QAC3B;QACA,IAAI,CAACiB,iBAAiB,CAAC,CAAC;MAC1B,EAAE,OAAOC,KAAK,EAAE;QACdL,OAAO,CAACK,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;IACF,CAAC;IACD,MAAMC,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF,MAAMf,QAAO,GAAI,MAAMC,KAAK,CAAC,gCAAgC,CAAC;QAC9D,IAAID,QAAQ,CAACgB,EAAE,EAAE;UACf,IAAI,CAACnB,YAAW,GAAI,MAAMG,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAC3C,OAAO;UACLC,OAAO,CAACK,KAAK,CAAC,gCAAgC,EAAEd,QAAQ,CAACiB,UAAU,CAAC;QACtE;MACF,EAAE,OAAOH,KAAK,EAAE;QACdL,OAAO,CAACK,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;IACF;EACF,CAAC;EACDI,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACL,iBAAiB,CAAC,CAAC;EAC1B;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}